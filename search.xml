<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java String</title>
    <url>/2020/06/14/java%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h2 id="JAVA-String类"><a href="#JAVA-String类" class="headerlink" title="JAVA String类"></a>JAVA String类</h2><h3 id="String-3大特性"><a href="#String-3大特性" class="headerlink" title="String 3大特性"></a>String 3大特性</h3><ul>
<li>不变性：是一个 immutable 模式的对象，不变模式的主要作用是当一个对象需要被多线程共享并 频繁访问时，可以保证数据的⼀致性。 </li>
<li>常量量池优化：String 对象创建之后，会在字符串常量池中进行缓存，下次创建同样的对象时，会直 接返回缓存的引⽤。</li>
<li>final: String类不可被继承，提⾼了系统的安全性。<a id="more"></a>

</li>
</ul>
<h3 id="String-的实例例化有两种⽅方式："><a href="#String-的实例例化有两种⽅方式：" class="headerlink" title="String 的实例例化有两种⽅方式："></a>String 的实例例化有两种⽅方式：</h3><ul>
<li><p>直接赋值</p>
</li>
<li><p>通过构造函数，可以直接将字符串串的值传入，也可以传入⼀个 char 数组。</p>
<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4></li>
<li><p>直接赋值和通过构造函数创建主要区别在于存储的区域不同，直接赋值存储在字符串常量池中。</p>
</li>
<li><p>通过构造函数创建，存储在堆内存中。</p>
</li>
</ul>
<h3 id="equals重写"><a href="#equals重写" class="headerlink" title="equals重写"></a>equals重写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">	String aString = (String)anObject;</span><br><span class="line">    <span class="keyword">if</span> (coder() == aString.coder()) &#123;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.equals(value, aString.value) : StringUTF16.equals(value, aString.value);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为 String 类对 equals 方法进行了重写，所以我们可以直接调用String 的 equals 方法来判断两个字 符串的值是否相等。</p>
</blockquote>
<h3 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern() 方法"></a>intern() 方法</h3><ul>
<li>当调用某个字符串对象的 intern() ⽅方式，会去字符串常量池中寻找，如果已经存在一个值相等的字符串对象的话，则直接返回该对象的引用，如果不存在，则在字符串常量池中创建该对象，并返回。</li>
</ul>
<h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public String()</td>
<td>创建一个值为空的对象</td>
</tr>
<tr>
<td>public String(String original )</td>
<td>创建一个值为original的对象</td>
</tr>
<tr>
<td>public String(char value[])</td>
<td>将一个char型数组转为字符串对象</td>
</tr>
<tr>
<td>public String(char value[],  int offset, int count)</td>
<td>将一个指定范围的char型数组转为字符串 对象</td>
</tr>
<tr>
<td>public String(byte[] bytes)</td>
<td>将⼀个byte型数组转为字符串对象</td>
</tr>
<tr>
<td>public String(byte bytes[], int offset, int length)</td>
<td>将⼀个指定范围的byte型数组转为字符串对象</td>
</tr>
<tr>
<td>public int length()</td>
<td>返回字符串的长度</td>
</tr>
<tr>
<td>public boolean isEmpty()</td>
<td>判断字符串是否为空</td>
</tr>
<tr>
<td>public char charAt(int index)</td>
<td>返回字符串中指定位置的字符</td>
</tr>
<tr>
<td>public byte[] getBytes()</td>
<td>将字符串转为byte型数组</td>
</tr>
<tr>
<td>public boolean equals(Object anObject)</td>
<td>判断两个字符串是否相等</td>
</tr>
<tr>
<td>public boolean equalsIgnoreCase(String anotherString)</td>
<td>判断两个字符串是否相等并且忽略大小写</td>
</tr>
<tr>
<td>public int compareTo(String anotherString)</td>
<td>对两个字符串进行排序</td>
</tr>
<tr>
<td>public boolean startsWith(String prefix)</td>
<td>判断是否以指定的值开头</td>
</tr>
<tr>
<td>public boolean endsWith(String suffix)</td>
<td>判断是否以指定的值结尾</td>
</tr>
<tr>
<td>public int hashCode()</td>
<td>获取字符串的散列值</td>
</tr>
<tr>
<td>public int indexOf(String str)</td>
<td>从头开始查找指定字符的位置</td>
</tr>
<tr>
<td>public int indexOf(String str, int fromIndex)</td>
<td>从指定的位置开始查找指定字符的位置</td>
</tr>
<tr>
<td>==public String substring(int beginIndex)==</td>
<td>截取字符串串从指定位置开始到结尾</td>
</tr>
<tr>
<td>public String substring(int beginIndex, int endIndex)</td>
<td>截取字符串从指定位置开始到指定位置结束</td>
</tr>
<tr>
<td>public String concat(String str)</td>
<td>追加字符串</td>
</tr>
<tr>
<td>public String replaceAll(String regex, String replacement)</td>
<td>替换字符串</td>
</tr>
<tr>
<td>public String[] split(String regex)</td>
<td>⽤指定字符串对目标字符串进⾏分割，返 回数组</td>
</tr>
<tr>
<td>public String toLowerCase()</td>
<td>将字符串转为小写</td>
</tr>
<tr>
<td>public String to Uppercase()</td>
<td>将字符串转为大写</td>
</tr>
<tr>
<td>public char[] toCharArray()</td>
<td>将字符串转为char型数组</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] array = &#123;<span class="string">'J'</span>,<span class="string">'a'</span>,<span class="string">'v'</span>,<span class="string">'a'</span>,<span class="string">','</span>,<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">','</span>,<span class="string">'W'</span>,<span class="string">'o'</span>,<span class="string">'r'</span>,<span class="string">'l'</span>,<span class="string">'d'</span>&#125;; </span><br><span class="line">String str = <span class="keyword">new</span> String(array); </span><br><span class="line">System.out.println(str); System.out.println(<span class="string">"str长度："</span>+str.length()); </span><br><span class="line">System.out.println(<span class="string">"str是否为空："</span>+str.isEmpty()); </span><br><span class="line">System.out.println(<span class="string">"下标为2的字符是："</span>+str.charAt(<span class="number">2</span>)); </span><br><span class="line">System.out.println(<span class="string">"H的下标是："</span>+str.indexOf(<span class="string">'H'</span>)); </span><br><span class="line">String str2 = <span class="string">"Hello"</span>; </span><br><span class="line">System.out.println(<span class="string">"str和str2是否相等："</span>+str.equals(str2)); </span><br><span class="line">String str3 = <span class="string">"HELLO"</span>; </span><br><span class="line">System.out.println(<span class="string">"str2和str3忽略略⼤大⼩小写是否相等："</span>+str2.equalsIgnoreCase(str3)); </span><br><span class="line">System.out.println(<span class="string">"str是否以Java开头："</span>+str.startsWith(<span class="string">"Java"</span>)); </span><br><span class="line">System.out.println(<span class="string">"str是否以Java结尾："</span>+str.endsWith(<span class="string">"Java"</span>));</span><br><span class="line">System.out.println(<span class="string">"从2开始截取str："</span>+str.substring(<span class="number">2</span>)); </span><br><span class="line">System.out.println(<span class="string">"从2到6截取str："</span>+str.substring(<span class="number">2</span>, <span class="number">6</span>)); </span><br><span class="line">System.out.println(<span class="string">"将str中的World替换为Java："</span>+str.replaceAll(<span class="string">"World"</span>, <span class="string">"Java"</span>)); </span><br><span class="line">System.out.println(<span class="string">"⽤用逗号分割str："</span>+Arrays.toString(str.split(<span class="string">","</span>))); </span><br><span class="line">System.out.println(<span class="string">"将str转为char类型数组："</span>+Arrays.toString(str.toCharArray())); </span><br><span class="line">System.out.println(<span class="string">"str3转为⼩小写："</span>+str3.toLowerCase());</span><br><span class="line">System.out.println(<span class="string">"str2转为⼤大写："</span>+str2.toUpperCase());</span><br></pre></td></tr></table></figure>

<h4 id="字符串截取和分割"><a href="#字符串截取和分割" class="headerlink" title="字符串截取和分割"></a>字符串截取和分割</h4><ul>
<li><p>字符串截取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br></pre></td></tr></table></figure>

<p>substring(int beginIndex) 是从下标为 beginIndex 的位置开始截取，⼀一直到字符串串的结尾。<br>substring(int beginIndex, int endIndex) 是从下标为 beginIndex 的位置开始截取，一直到 endIndex 的位置结束，且不包括该位置的字符。<br>需要注意的是 substring 方法会将截取的结果以新字符串的形式返回，原字符串的值不会改变，具体操作如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello World"</span>); </span><br><span class="line">System.out.println(str.substring(<span class="number">3</span>)); </span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex);</span><br></pre></td></tr></table></figure>

<p>split 方法支持传入正则表达式，进行复杂的字符串分割，比如 “Hello,World;Java-String”，如果要分别 将 Hello、World、Java、String 截取出来，使⽤用统一的某个分割符肯定⽆无法完成，这时候可以借助于正则表达式 “[,|;|-]” 来实现，具体操作如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello,World;Java-String"</span>); </span><br><span class="line">String[] array = str.split(<span class="string">"[,|;|-]"</span>); </span><br><span class="line"><span class="keyword">for</span> (String item:array)&#123; </span><br><span class="line">	System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3></li>
</ul>
<ol>
<li>== 和 equals 的区别？<br>== 可以理理解为是⽐比较栈内存中的值，如果变量量是基本数据类型，则栈内存中存放的就是具体数值，如 果是引⽤用类型，则栈中存放的是引⽤用的内存地址。所以对于基本数据类型，== 是比较值是否相等，对于引用数据类型，比较的是引用的内存地址是否相等。</li>
</ol>
<p><img src="/2020/06/14/java%E7%AC%94%E8%AE%B0-1/image-20200611141538452.png" alt="image-20200611141538452"></p>
]]></content>
  </entry>
  <entry>
    <title>To Be a FullStackDeveloper</title>
    <url>/2020/06/14/To%20Be%20a%20FullStackDeveloper/</url>
    <content><![CDATA[<hr>
<h1 id="这是我的个人博客"><a href="#这是我的个人博客" class="headerlink" title="这是我的个人博客"></a>这是我的个人博客</h1><blockquote>
<p>欢迎加我的qq：1138694667</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hexo图片插入的bug</title>
    <url>/2020/06/14/Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E7%9A%84bug/</url>
    <content><![CDATA[<h2 id="图片-bug"><a href="#图片-bug" class="headerlink" title="图片 bug"></a>图片 bug</h2><blockquote>
<p>在搭建Hexo+Next框架的博客时，一直没办法再md中插入图片，路径总是出错。</p>
<p>在查找资料后发现：</p>
<p>使用 npm install <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FCodeFalling%2Fhexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save 安装0.0.5版本的hexo-asset-image插件。 使用 npm install hexo-asset-image –save 安装的是1.0.0版本的hexo-asset-image插件。 两者最直接的区别是映射关系不同。 具体详情见<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.99708.com.cn%2F2019%2F07%2F26%2Fhexo-" target="_blank" rel="noopener">http://www.99708.com.cn/2019/07/26/hexo-</a>本地图片不显示</p>
<p>但是再安装时不知为什么总是会报错，所以我们直接修改/node_modules/hexo-asset-image/index.js的代码，如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>附上原博地址：<a href="https://www.qaqu.net/2020-1-12-Hexo4.2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">https://www.qaqu.net/2020-1-12-Hexo4.2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</a></p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
</search>
